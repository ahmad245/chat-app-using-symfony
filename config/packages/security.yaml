security:
    encoders: 
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
       
        users_in_memory: { memory: null }
        in_database:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        admin:
            pattern: ^/admin
            anonymous: lazy
           
            provider: in_database
            
           
            
            
            form_login:
                login_path: admin_account_login
                check_path : admin_account_login 
                default_target_path: admin_user 
                always_use_default_target_path: true
                use_referer: true
                
                
                # require_previous_session: true
                # csrf_token_generator: security.csrf.token_manager
                
            logout:
                path: admin_account_logout
                target: admin_account_login 

            user_checker: App\Security\UserEnabledChecker
            switch_user: true
       
            

        main:
            anonymous: lazy
         

            provider: in_database
            form_login:
               login_path: account_login
               check_path: account_login

            logout:
                path: account_logout
                target: account_login    

            user_checker: App\Security\UserEnabledChecker


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/admin, roles: ROLE_ADMIN }
        #  - { path: '^/', roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }         
    role_hierarchy:
             ROLE_ADMIN: ROLE_USER
           